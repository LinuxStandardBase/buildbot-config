# -*- python -*-
# ex: set syntax=python:

import os

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# Toplevel configuration, used by the builder/scheduler setup.

stable_timer_hours = 1
stable_timer_seconds = stable_timer_hours * 60 * 60

lsb_bzr_toplevel = "http://bzr.linuxfoundation.org/lsb/"
lsb_bzr_sdk_projects = ["lsbdev-base", "lsbdev-cc", "lsbdev-c++",
                        "lsbdev-desktop", "lsbdev-qt", "lsbdev-qt3"]

moblin_bzr_toplevel = "http://bzr.linuxfoundation.org/moblin/"
moblin_osv_tests_projects = ["moblin-test-kernel", "moblin-test-media", 
                             "moblin-test-browser", "moblin-test-clutter",
                             "moblin-test-package-management", 
                             "moblin-test-desktop", 
                             "moblin-test-package-version", 
                             "moblin-test-graphics", "moblin-test-perf-power",
                             "moblin-test-bickley"]


# We define our own build classes, for working with the quirky LSB build
# system.  The idea is that we set (or don't) certain environment variables
# depending on whether the branch or revision has been overriden, to add
# the date-based versions when they haven't.  Also, for those projects
# built out of packaging, handle them too.

from buildbot.steps.shell import ShellCommand

class LSBBuildCommand(ShellCommand):
    def setupEnvironment(self, cmd):
        if self.build.source.changes is None:
            if self.build.source.revision is None:
                buildrev = "-1"
            else:
                buildrev = self.build.source.revision
            if cmd.args['env'] is None:
                cmd.args
            self.build.slaveEnvironment['OFFICIAL_RELEASE'] = buildrev

        ShellCommand.setupEnvironment(self, cmd)

class LSBBuildPackage(LSBBuildCommand):
    def __init__(self, **kwargs):
        if "command" not in kwargs:
            kwargs["command"] = "cd package && make rpm_package"
        ShellCommand.__init__(self, **kwargs)

# Automate some of the packaging build.  When using this, be sure to check
# out a copy of "packaging" (via ShellCommand, as buildbot's source stuff
# can't currently handle multi-repo builds), that your source checkout
# uses a named build dir that's the same as the project, and that BZRTREES
# is set to "..".

class LSBBuildFromPackaging(LSBBuildCommand):
    def __init__(self, **kwargs):
        if "subdir" in kwargs:
            kwargs["command"] = "cd ../packaging/%s && make rpm_package" % kwargs["subdir"]
        ShellCommand.__init__(self, **kwargs)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("lfbuild-amd64", "bot1passwd", max_builds=1),
               BuildSlave("lfbuild-moblin", "Quai8ree", max_builds=1)]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

lsb_buildslave_names = ["lfbuild-amd64"]
lsb_buildslave_arch_indep_names = ["lfbuild-amd64"]

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from bzr_buildbot import BzrPoller

c['change_source'] = []
for branch in ("app-checker", "distribution-checker", "moblin-osv-tests",
               "moblin-isv-tests", "misc-test", "moblin-xvfb"):
    c['change_source'].append(
        BzrPoller(url="%sdevel/%s" % (moblin_bzr_toplevel, branch),
                  branch_name="devel/" + branch))

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

from buildbot import scheduler

sch_lsb_sdk = scheduler.Nightly(name="build-sdk", branch=None,
                                builderNames=["build-sdk"],
                                hour=19, minute=0)
sch_update_lsb_sdk = scheduler.Dependent(name="update-sdk",
                                         upstream=sch_lsb_sdk,
                                         builderNames=["update-sdk"])

c['schedulers'] = [sch_lsb_sdk, sch_update_lsb_sdk]

for (prj, branch_names) in [("build-moblin-osv-tests", ["moblin-osv-tests"]),
                            ("build-moblin-app-checker", 
                             ["app-checker", "moblin-isv-tests", "misc-test"]),
                            ("build-moblin-distribution-checker", 
                             ["distribution-checker"]),
                            ("build-moblin-xvfb", ["moblin-xvfb"]),
                            ("build-libchk-me", ["misc-test"])]:
    branches = ["devel/" + x for x in branch_names]
    prj_scheduler = \
        scheduler.AnyBranchScheduler(name=prj, branches=branches,
                                     builderNames=[prj],
                                     treeStableTimer=stable_timer_seconds)
    update_scheduler = scheduler.Dependent(name="update-" + prj,
                                           builderNames=["build-moblin-results"],
                                           upstream=prj_scheduler)
    c['schedulers'].extend([prj_scheduler, update_scheduler])


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

#cvsroot = ":pserver:anonymous@cvs.sourceforge.net:/cvsroot/buildbot"
#cvsmodule = "buildbot"

#from buildbot.process import factory
#from buildbot.steps.source import CVS
#from buildbot.steps.shell import Compile
#from buildbot.steps.python_twisted import Trial
#f1 = factory.BuildFactory()
#f1.addStep(CVS(cvsroot=cvsroot, cvsmodule=cvsmodule, login="", mode="copy"))
#f1.addStep(Compile(command=["python", "./setup.py", "build"]))
#f1.addStep(Trial(testpath="."))

#b1 = {'name': "buildbot-full",
#      'slavename': "bot1name",
#      'builddir': "full",
#      'factory': f1,
#      }
#c['builders'] = [b1]

from buildbot.process import factory
from buildbot.steps.source import Bzr
from buildbot.steps.transfer import FileUpload

# LSB builds

build_sdk = factory.BuildFactory()
build_sdk.addStep(Bzr(baseURL=lsb_bzr_toplevel, 
                      defaultBranch="devel/packaging",
                      mode="copy"))
build_sdk.addStep(ShellCommand(command=['reset-sdk'], name="reset-sdk"))
build_sdk.addStep(ShellCommand(command=["rm", "-rf", 
                                        "../sdk-results"],
                               name="rm-old-results"))
for sdk_project in lsb_bzr_sdk_projects:
    build_sdk.addStep(ShellCommand(command=['mkdir', '-p', 
                                            '../sdk-results/' + sdk_project],
                                   name="mkdir_" + sdk_project))
    sdk_command = "cd " + sdk_project + " && make rpm_package"
    build_sdk.addStep(ShellCommand(command=sdk_command,
                                   name="build_" + sdk_project))
    build_sdk.addStep(
        ShellCommand(command="cp %s/*.rpm ../sdk-results/%s" 
                             % (sdk_project, sdk_project),
                     name="copy_" + sdk_project))
build_sdk.addStep(ShellCommand(command=['tar', 'czf', '../sdk-results.tar.gz',
                                        '../sdk-results'],
                               name="pack-sdk"))
build_sdk.addStep(FileUpload(slavesrc="../sdk-results.tar.gz", 
                             masterdest="lsb-sdk-results-%s.tar.gz" 
                                         % os.uname()[-1]))

update_sdk = factory.BuildFactory()
update_sdk.addStep(ShellCommand(command=['update-sdk', 
                                         '../../build-sdk/sdk-results']))

build_makelsbpkg = factory.BuildFactory()
build_makelsbpkg.addStep(Bzr(baseURL=lsb_bzr_toplevel,
                             defaultBranch="devel/makelsbpkg",
                             mode="copy", timeout=4*60*60))
build_makelsbpkg.addStep(LSBBuildPackage())
build_makelsbpkg.addStep(ShellCommand(command=["rm", "-rf", "../results"]))
build_makelsbpkg.addStep(ShellCommand(command=["mkdir", "-p", "../results"]))
build_makelsbpkg.addStep(ShellCommand(command="cp package/*.rpm ../results"))
build_makelsbpkg.addStep(ShellCommand(command=["tar", "czf", 
                                               "../results.tar.gz", 
                                               "../results"]))
build_makelsbpkg.addStep(ShellCommand(command=["rm", "-rf", "../results"]))
build_makelsbpkg.addStep(FileUpload(slavesrc="../results.tar.gz", 
                                    masterdest="makelsbpkg-results-%s.tar.gz" 
                                    % os.uname()[-1]))

build_lsb_appchk = factory.BuildFactory()
build_lsb_appchk.addStep(Bzr(baseURL=lsb_bzr_toplevel,
                             defaultBranch="devel/misc-test",
                             workdir="misc-test",
                             mode="update", timeout=4*60*60))
build_lsb_appchk.addStep(ShellCommand(command=["rm", "-rf", "../packaging"]))
build_lsb_appchk.addStep(
    ShellCommand(command=["bzr", "checkout", 
                          os.path.join(lsb_bzr_toplevel, "devel/packaging"),
                          "../packaging"]))
build_lsb_appchk.addStep(LSBBuildFromPackaging(subdir="lsbappchk",
                                               env={"BZRTREES": ".."}))
build_lsb_appchk.addStep(ShellCommand(command=["rm", "-rf", "../results"]))
build_lsb_appchk.addStep(ShellCommand(command=["mkdir", "-p", "../results"]))
build_lsb_appchk.addStep(ShellCommand(command="cp ../packaging/lsbappchk/*.rpm ../results"))
build_lsb_appchk.addStep(ShellCommand(command=["tar", "czf", 
                                               "../results.tar.gz", 
                                               "../results"]))
build_lsb_appchk.addStep(ShellCommand(command=["rm", "-rf", "../results"]))
build_lsb_appchk.addStep(FileUpload(slavesrc="../results.tar.gz", 
                                    masterdest="lsbappchk-results-%s.tar.gz" 
                                    % os.uname()[-1]))

# Moblin builds

app_checker_builder = factory.BuildFactory()

# Direct bzr version of checkout step.  This doesn't work, because a
# ChangeSource will override the defaultBranch setting, and you get three
# checkouts of the same source.
#app_checker_builder.addStep(Bzr(baseURL=moblin_bzr_toplevel, 
#                    defaultBranch="devel/app-checker",
#                    mode="update", timeout=60*60, workdir="app-checker"))
#app_checker_builder.addStep(Bzr(baseURL=moblin_bzr_toplevel, 
#                    defaultBranch="devel/moblin-isv-tests",
#                    mode="update", timeout=60*60, workdir="moblin-isv-tests"))
#app_checker_builder.addStep(Bzr(baseURL=moblin_bzr_toplevel, 
#                    defaultBranch="devel/misc-test",
#                    mode="update", timeout=60*60, workdir="misc-test"))

# ShellCommand version of checkout step.
app_checker_repos = ["app-checker", "moblin-isv-tests", "misc-test"]
for repo in app_checker_repos:
    app_checker_builder.addStep(
        ShellCommand(command=["bzr", "checkout",
                              os.path.join(moblin_bzr_toplevel, "devel", 
                                           repo)]))
# The following steps may need to be adjusted for the Bzr or ShellCommand
# versions of the checkout step.

app_checker_builder.addStep(ShellCommand(command=['rm', '-rf', 
                                      '../../moblin-results/app-checker'],
                                         name="copypkg1"))
app_checker_builder.addStep(ShellCommand(command=['mkdir', '-p', 
                                      '../../moblin-results/app-checker'],
                                         name="copypkg2"))
app_checker_builder.addStep(ShellCommand(command="cd app-checker/package && make BUILD_NO_DEB=1 BZRTREES=../..",
                                         name="build"))
app_checker_builder.addStep(ShellCommand(command='cp app-checker/package/*.rpm ../../moblin-results/app-checker',
                                         name="copypkg3"))

for repo in app_checker_repos:
    app_checker_builder.addStep(ShellCommand(command=["rm", "-rf", repo]))

dist_checker_builder = factory.BuildFactory()
dist_checker_builder.addStep(Bzr(baseURL=moblin_bzr_toplevel, 
                                 defaultBranch="devel/distribution-checker",
                                 mode="copy", timeout=60*60))
dist_checker_builder.addStep(ShellCommand(command=['rm', '-rf', 
                                                   '../../moblin-results/distribution-checker'],
                                          name="copypkg1"))
dist_checker_builder.addStep(ShellCommand(command=['mkdir', '-p', 
                                                   '../../moblin-results/distribution-checker'],
                                          name="copypkg2"))
dist_checker_builder.addStep(ShellCommand(command="cd package && make BUILD_NO_DEB=1 BRANCH=moblin",
                                          name="build", timeout=60*60))
dist_checker_builder.addStep(ShellCommand(command='cp package/*.rpm ../../moblin-results/distribution-checker',
                                          name="copypkg3"))

osv_tests_builder = factory.BuildFactory()
osv_tests_builder.addStep(Bzr(baseURL=moblin_bzr_toplevel, 
                              defaultBranch="devel/moblin-osv-tests",
                              mode="copy", timeout=60*60))
osv_tests_builder.addStep(
    ShellCommand(command=['rm', '-rf', 
                          '../../moblin-results/moblin_osv_tests'],
                 name="copypkgs1"))
osv_tests_builder.addStep(
    ShellCommand(command=['mkdir', '-p', 
                          '../../moblin-results/moblin_osv_tests'],
                 name="copypkgs2"))
for prj in moblin_osv_tests_projects:
    osv_tests_builder.addStep(
        ShellCommand(command="cd %s/package && ./pack.sh" % prj,
                     name="build_" + prj))
    osv_tests_builder.addStep(
        ShellCommand(command='cp %s/package/*.rpm ../../moblin-results/moblin_osv_tests' % prj,
                     name="copypkgs_" + prj))

moblin_xvfb_builder = factory.BuildFactory()
moblin_xvfb_builder.addStep(Bzr(baseURL=moblin_bzr_toplevel, 
                                defaultBranch="devel/moblin-xvfb",
                                mode="copy", timeout=60*60))
moblin_xvfb_builder.addStep(
    ShellCommand(command=['rm', '-rf', 
                          '../../moblin-results/moblin-xvfb'],
                 name="copypkg1"))
moblin_xvfb_builder.addStep(
    ShellCommand(command=['mkdir', '-p', 
                          '../../moblin-results/moblin-xvfb'],
                 name="copypkg2"))
moblin_xvfb_builder.addStep(
    ShellCommand(command="cd package && make BUILD_NO_DEB=1",
                 name="build", timeout=60*60))
moblin_xvfb_builder.addStep(
    ShellCommand(command='cp package/*.rpm ../../moblin-results/moblin-xvfb',
                 name="copypkg3"))

libchk_me_builder = factory.BuildFactory()
libchk_me_builder.addStep(Bzr(baseURL=moblin_bzr_toplevel, 
                              defaultBranch="devel/misc-test",
                              mode="copy", timeout=60*60))
libchk_me_builder.addStep(
    ShellCommand(command=['rm', '-rf', 
                          '../../moblin-results/libchk-me'],
                 name="copypkg1"))
libchk_me_builder.addStep(
    ShellCommand(command=['mkdir', '-p', 
                          '../../moblin-results/libchk-me'],
                 name="copypkg2"))
libchk_me_builder.addStep(
    ShellCommand(command="cd package && make",
                 name="build", timeout=60*60))
libchk_me_builder.addStep(
    ShellCommand(command='cp package/*.rpm ../../moblin-results/libchk-me',
                 name="copypkg3"))

results_builder = factory.BuildFactory()
results_builder.addStep(ShellCommand(command=["tar", "czf", 
                                              "moblin-results.tar.gz", 
                                              "../../moblin-results"], 
                                     name="tar"))
results_builder.addStep(FileUpload(slavesrc="moblin-results.tar.gz", 
                                   masterdest="moblin-results.tar.gz"))
results_builder.addStep(MasterShellCommand(command="./upload-moblin-results"))
# For now, keep old results around, since we may not build everything
# every night.  To start fresh daily, uncomment the following.
#results_builder.addStep(ShellCommand(command=["rm", "-rf", 
#                                              "../../moblin-results"]))

# Final build configuration

c['builders'] = [
    { 'name': 'build-sdk', 'slavenames': lsb_buildslave_names,
      'builddir': 'build-sdk', 'factory': build_sdk, 'category': 'lsb' },
    { 'name': 'update-sdk', 'slavenames': lsb_buildslave_names,
      'builddir': 'update-sdk', 'factory': update_sdk, 'category': 'lsb' },
    { 'name': 'build-makelsbpkg', 'slavenames': lsb_buildslave_names,
      'builddir': 'makelsbpkg', 'factory': build_makelsbpkg, 
      'category': 'lsb' },
    { 'name': 'build-lsb-appchk', 'slavenames': lsb_buildslave_names,
      'builddir': 'lsbappchk', 'factory': build_lsb_appchk, 
      'category': 'lsb' },
    { 'name': 'build-moblin-osv-tests', 'slavenames': ['lfbuild-moblin'],
      'builddir': 'build-moblin-osv-tests', 'factory': osv_tests_builder, 
      'category': 'moblin' },
    { 'name': 'build-moblin-app-checker', 'slavenames': ['lfbuild-moblin'],
      'builddir': 'build-moblin-app-checker', 'factory': app_checker_builder, 
      'category': 'moblin' },
    { 'name': 'build-moblin-distribution-checker', 
      'slavenames': ['lfbuild-moblin'],
      'builddir': 'build-moblin-distribution-checker', 
      'factory': dist_checker_builder, 'category': 'moblin' },
    { 'name': 'build-moblin-xvfb', 'slavenames': ['lfbuild-moblin'],
      'builddir': 'build-moblin-xvfb', 'factory': moblin_xvfb_builder,
      'category': 'moblin' },
    { 'name': 'build-libchk-me', 'slavenames': ['lfbuild-moblin'],
      'builddir': 'build-libchk-me', 'factory': libchk_me_builder,
      'category': 'moblin' },
    { 'name': 'build-moblin-results', 'slavenames': ['lfbuild-moblin'],
      'builddir': 'build-moblin-results', 'factory': results_builder,
      'category': 'moblin' },
]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010, allowForce=True))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Linux Foundation"
c['projectURL'] = "http://www.linuxfoundation.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://dev.linuxfoundation.org/buildbot/"

# -*- python -*-
# ex: set syntax=python:

import os

from buildbot import scheduler, locks
from buildbot.buildslave import BuildSlave
from buildbot.process import factory
from buildbot.steps import trigger
from buildbot.steps.shell import ShellCommand, Configure, Compile
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.source import Bzr
from buildbot.steps.transfer import FileUpload
from buildbot.process.properties import WithProperties
from buildbot.status import html
from buildbot.status import words
from buildbot.status.web.auth import HTPasswdAuth

import lfbuildbot

from bzr_buildbot import BzrPoller

# This buildbot config file defines the LSB builds that are needed.
# 
# Each project needs one build per architecture; this includes the
# "sdk" meta-project and all the other pieces we build.  So, to
# prevent cut-n-pasting, we use conventions.  All architectures are
# defined in an architectures list, and builds are named
# "project-arch".  Schedulers for these are named "sch-project-arch".
# For the special "sdk" project, the job's name is "build-sdk-arch".
# Its scheduler is prefixed with "sch-", like the others.

# Toplevel configuration, used by the builder/scheduler setup.

web_htpasswd_path = "/data/buildbot/buildbot_htpasswd"
bzr_toplevel = "http://bzr.linuxfoundation.org/"

# Timers and timeouts for builds.  We define them as hours here,
# and translate them into seconds below for buildbot's benefit.
stable_timer_hours = 1
slow_stable_timer_hours = 6
bzr_timeout_hours = 4
build_timeout_hours = 4

# Supported architectures.
lsb_archs = ["x86_64", "x86", "ia64", "ppc32", "ppc64", "s390", "s390x"]

# This funny-sounding setting controls which architecture we hold
# responsible for building architecture-independent components.
lsb_buildslave_arch_indep_arch = "x86_64"

# Some architectures, for whatever reason, need to use as few resources
# as possible while still allowing it to be supported.  We don't build
# these archs on every version control change, and we may limit builds
# in other ways as well.  Note that the arch independent arch, defined
# immediately above, CANNOT be part of this list.
low_resource_archs = ["s390", "s390x"]

# Extra projects to build as part of the SDK project.
lsb_bzr_sdk_projects = ["lsbdev-c++", "lsbdev-qt", "lsbdev-qt3"]

# "Package subdir" projects.  These have a "package" directory off the
# source root, which has a Makefile which acts a certain way.  See any
# of the current projects' package/Makefile for an example.  We declare
# each project here as the key to the dict, and any extra repositories
# needed during the build in the array value.
lsb_pkg_subdir_projects = { "app-checker": [],
                            "azov-qt3-tests": ["t2c-harness"],
                            "azov-qt4-tests": ["t2c-harness"],
                            "azov-xml2-tests": ["t2c-harness"],
                            "desktop-test": ["xml-test", "misc-test"],
                            "distribution-checker": [],
                            "dtk-manager": [],
                            "libstdcpp-test": [],
                            "lsb-setup": [],
                            "lsb-xvfb": [],
                            "lsb-sigchk": [],
                            "lsbappchk-perl": [],
                            "lsbappchk-python": ["misc-test"],
                            "lsbappchk-sh": [],
                            "lsbsi-tools": [],
                            "makelsbpkg": [],
                            "olver-core-tests": [],
                            "perl-test": [],
                            "printing-test": ["runtime-test"],
                            "python-test": ["misc-test"],
                            "qmtest-harness": [],
                            "runtime-test": [],
                            "t2c-alsa-tests": ["t2c-harness"],
                            "t2c-cpp-tests": ["t2c-harness"],
                            "t2c-desktop-tests": ["t2c-harness"],
                            "t2c-runtime-tests": ["t2c-harness"],
                            "task-pkgs": [],
                            "tet-harness": [],
                            "xts5-test": ["vsw4-test"] }

# "Packaging" projects.  These are built out of a tree called "packaging".
# The name of the project in packaging is the first value of each tuple,
# while the repository used to build it is the second.
lsb_packaging_projects = [("lsbappchk", "misc-test"),
                          ("lsbarchk", "misc-test"),
                          ("lsbcmdchk", "misc-test"),
                          ("lsbdev-runner", "build_env"),
                          ("lsblibchk", "misc-test"),
                          ("lsbpkgchk", "misc-test"),
                          ("lsb-xdg-utils", None)]

lsb_arch_indep_projects = ["lsb-setup", "lsbappchk-perl", "lsbappchk-python", 
                           "lsbappchk-sh", "perl-test", "task-pkgs"]

# Dependencies.  The key is the package depended on, and the values are
# the list of packages which depend on it.  For example, if you need "foo"
# to build "bar", you'd do "foo": ["bar"].  Dependencies cannot be recursive,
# as this could cause builder deadlocks.
lsb_dependencies = { "tet-harness": ["appbat", "azov-qt3-tests", 
                                     "azov-qt4-tests", "azov-xml2-tests", 
                                     "desktop-test", "printing-test", 
                                     "runtime-test", "t2c-cpp-tests", 
                                     "t2c-desktop-tests", "t2c-runtime-tests",
                                     "xts5-test"],
                     "qmtest-harness": ["libstdcpp-test"],
                     "lsbappchk-python": ["python-test"],
                     "libbat": ["lsb-xvfb", "xts5-test", "appbat"],
                     "lsbappchk": ["appbat"],
                     "lsbpkgchk": ["appbat"]}

# Job locking.  We don't limit the number of concurrent jobs per
# slave in the slave config; instead, we only allow one build at a time
# for builds not triggered via dependencies.
nondep_job_lock = locks.SlaveLock("nondep_builds", maxCount = 1)
dep_job_lock = locks.SlaveLock("dep_builds", maxCount = 1)

# Lock for all package installs.
pkg_lock = locks.SlaveLock("package_manager", maxCount = 1)

# Per-repo locks.  This handles when multiple projects are built
# out of the same repository.  If any of them are dependencies,
# we risk concurrent builds clobbering each other.  Right now,
# only misc-test works this way.
repo_locks = { "misc-test": locks.SlaveLock("misc-test", maxCount = 1) }

# Branches we watch, besides devel.
branch_watch_list = { "4.0": [ "appbat", "azov-qt3-tests", "azov-qt4-tests",
                               "desktop-test", "libstdcpp-test", "misc-test",
                               "olver-core-tests", "perl-test", 
                               "printing-test", "python-test", "runtime-test",
                               "t2c-cpp-tests", "t2c-desktop-tests", 
                               "t2c-harness", "xml-test", "xts5-test" ] }

# Values calculated from configured variables.
stable_timer_seconds = stable_timer_hours * 60 * 60
slow_stable_timer_seconds = slow_stable_timer_hours * 60 * 60
bzr_timeout_seconds = bzr_timeout_hours * 60 * 60
build_timeout_seconds = build_timeout_hours * 60 * 60

# Helper functions

def add_pre_dependency_triggers(project, arch, builder):
    for dep in lsb_dependencies:
        if project in lsb_dependencies[dep]:
            builder.addStep(
                trigger.Trigger(
                    schedulerNames=["trigger-%s-%s" % (dep, arch)],
                    waitForFinish=True, updateSourceStamp=False,
                    haltOnFailure=True,
                    copy_properties=['build_type', 'branch_name']))

def add_post_dependency_triggers(project, arch, builder):
    pkg_install_command = \
        "ls ../results/*.rpm | egrep -v src.rpm | " + \
        "xargs sudo rpm -Uvh --force"
    if project in lsb_dependencies:
        prj_name = "%s-%s" % (project, arch)

        builder.addStep(ShellCommand(command=pkg_install_command, 
                                     name="update-pkgs", locks=[pkg_lock],
                                     flunkOnFailure=False))

def always_pull_from_devel(project):
    # Figure out if the project needs to be built from devel
    # every time.  For now, just use "branches not specific
    # to 4.0" as the rule for this.
    return project not in branch_watch_list["4.0"]


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Priority order.  In general, we don't care what order things build in,
# or the order is sufficiently determined by triggers.  SDK builds and 
# updates can affect other builds, however, and should therefore be done
# first, and the update should happen as soon after the build as possible.

def prioritize(buildmaster, builders):
    sdk_builders = []
    for jobname in ("build-sdk", "libbat"):
        for builder in builders[:]:
            if builder.name[:len(jobname)] == jobname:
                builders.remove(builder)
                sdk_builders.append(builder)
    return sdk_builders + builders

c['prioritizeBuilders'] = prioritize

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
c['slaves'] = [BuildSlave("lfbuild-x86_64", "bot1passwd"),
               BuildSlave("lfbuild-x86", "ail1Aebu"),
               BuildSlave("lfbuild-ia64", "quae7Moh"),
               BuildSlave("lfbuild-ppc32", "AiSh4aej"),
               BuildSlave("lfbuild-ppc64", "ai2agaeT"),
               BuildSlave("lfbuild-s390", "aeGh0ooy"),
               BuildSlave("lfbuild-s390x", "ahtoop3O")]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9988


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

c['change_source'] = []
lsb_change_sources = lsb_pkg_subdir_projects.keys() + \
    [x[1] for x in lsb_packaging_projects if x[1] is not None] + ["appbat"]
added = []
for project in lsb_change_sources:
    if project in added:
        continue
    c['change_source'].append(
        BzrPoller(url="%slsb/devel/%s" % (bzr_toplevel, project),
                  branch_name="lsb/devel/" + project))
    for branch in branch_watch_list:
        if project in branch_watch_list[branch]:
            c['change_source'].append(
                BzrPoller(url="%slsb/%s/%s" % (bzr_toplevel, branch, project),
                          branch_name="lsb/%s/%s" % (branch, project)))
    added.append(project)

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

# LSB schedulers

# Build the SDK daily.  Since it's not complicated, we can schedule
# all the builds with a single scheduler.
# XXX: disable for now; build the SDK like everything else.

sch_sdk_names = ["build-sdk-" + x for x in lsb_archs]
#sch_build = scheduler.Nightly(name="build-sdk", branch=None,
#                              builderNames=sch_sdk_names, hour=19, minute=0)

# Accept multiple jobs via a job directory.  Since we have to report
# which builders we might start, create a list of all projects to pass
# in.

multi_builder_list = sch_sdk_names[:]

arch_prj_list = lsb_pkg_subdir_projects.keys() + \
    ["appbat", "libbat"] + [x[0] for x in lsb_packaging_projects]

for prj in arch_prj_list:
    if prj in lsb_arch_indep_projects:
        multi_builder_list.append("%s-%s" % (prj, 
                                             lsb_buildslave_arch_indep_arch))
    else:
        for arch in lsb_archs:
            multi_builder_list.append("%s-%s" % (prj, arch))

jobdir_repos = dict(lsb_packaging_projects)
jobdir_repos["build-sdk"] = "build_env"
jobdir_repos["devchk"] = "misc-test"

sch_jobdir = lfbuildbot.MultiScheduler(
    name="sch_jobdir", builderNames=multi_builder_list, 
    jobdir="/var/buildbot", repos=jobdir_repos, archs=lsb_archs, 
    indep_prj=lsb_arch_indep_projects,
    indep_arch=lsb_buildslave_arch_indep_arch)

c['schedulers'] = [sch_jobdir]

# The rest of the schedulers (except the weekly one) react to events, 
# such as a previous build succeeding or a change in version control,
# and so have to be defined per project and per architecture.  These
# first schedulers handle updating the SDK after a successful build,
# as well as the appbat.

for arch in lsb_archs:
    sch_libbat = lfbuildbot.IndepTriggerable(name="trigger-libbat-" + arch,
                                             builderNames=["libbat-" + arch],
                                             defaultProject="appbat")
    c['schedulers'].append(sch_libbat)

    if arch not in low_resource_archs:
        sch_appbat = scheduler.Scheduler(
            name="sch-appbat-" + arch, branch="lsb/devel/appbat",
            builderNames=["appbat-" + arch], 
            treeStableTimer=slow_stable_timer_seconds)
        sch_devchk = scheduler.Scheduler(name="sch-devchk-" + arch,
                                         branch="lsb/devel/misc-test",
                                         builderNames=["devchk-" + arch],
                                         treeStableTimer=stable_timer_seconds)
        sch_sdk = scheduler.Scheduler(name="sch-build-sdk-" + arch,
                                      branch="lsb/devel/build_env",
                                      builderNames=["build-sdk-" + arch],
                                      treeStableTimer=stable_timer_seconds)

        c['schedulers'].extend([sch_sdk, sch_appbat, sch_devchk])

# Package subdir schedulers.

for prj in lsb_pkg_subdir_projects:
    if prj in lsb_arch_indep_projects:
        archlist = [lsb_buildslave_arch_indep_arch]
    else:
        archlist = lsb_archs
    for arch in archlist:
        prj_name = "%s-%s" % (prj, arch)

        for deplist in lsb_dependencies.itervalues():
            if prj in deplist:
                sch = lfbuildbot.IndepTriggerable(name="trigger-" + prj_name,
                                                  builderNames=[prj_name],
                                                  defaultProject=prj)
                c['schedulers'].append(sch)
                break

        if arch not in low_resource_archs:
            sch = scheduler.Scheduler(name="sch-" + prj_name,
                                      branch=os.path.join("lsb/devel", prj),
                                      builderNames=[prj_name],
                                      treeStableTimer=stable_timer_seconds)
            c['schedulers'].append(sch)

            for branch in branch_watch_list:
                if prj in branch_watch_list[branch]:
                    sch = scheduler.Scheduler(
                        name="sch-%s-%s" % (prj_name, branch),
                        branch=os.path.join("lsb", branch, prj),
                        builderNames=[prj_name],
                        treeStableTimer=stable_timer_seconds)
                    c['schedulers'].append(sch)

# Packaging project schedulers.

for (prj, repo) in lsb_packaging_projects:
    if prj in lsb_arch_indep_projects:
        archlist = [lsb_buildslave_arch_indep_arch]
    else:
        archlist = [x for x in lsb_archs if x not in low_resource_archs]
    branches = ["lsb/devel/packaging"]
    if repo is not None:
        branches.append(os.path.join("lsb/devel", repo))
    for arch in archlist:
        prj_name = "%s-%s" % (prj, arch)
        sch = \
            scheduler.AnyBranchScheduler(name="sch-" + prj_name,
                                         branches=branches,
                                         builderNames=[prj_name],
                                         treeStableTimer=stable_timer_seconds)
        c['schedulers'].append(sch)

# Triggerable schedulers for dependencies.

for prj in lsb_dependencies:
    # libbat is special, we define its schedulers earlier.
    if prj != "libbat":
        if prj in lsb_arch_indep_projects:
            archlist = [lsb_buildslave_arch_indep_arch]
        else:
            archlist = lsb_archs

        devel_only = always_pull_from_devel(prj)

        # Get the repository name to pull from.
        default_prj = prj
        for (pkgprj, repo) in lsb_packaging_projects:
            if pkgprj == prj:
                default_prj = repo
                break

        # Actually set up the schedulers.
        for arch in archlist:
            prj_name = "%s-%s" % (prj, arch)
            sch = lfbuildbot.IndepTriggerable(name="trigger-" + prj_name,
                                              builderNames=[prj_name],
                                              defaultProject=default_prj,
                                              alwaysDevel=devel_only)
            c["schedulers"].append(sch)


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

#cvsroot = ":pserver:anonymous@cvs.sourceforge.net:/cvsroot/buildbot"
#cvsmodule = "buildbot"

#from buildbot.process import factory
#from buildbot.steps.source import CVS
#from buildbot.steps.shell import Compile
#from buildbot.steps.python_twisted import Trial
#f1 = factory.BuildFactory()
#f1.addStep(CVS(cvsroot=cvsroot, cvsmodule=cvsmodule, login="", mode="copy"))
#f1.addStep(Compile(command=["python", "./setup.py", "build"]))
#f1.addStep(Trial(testpath="."))

#b1 = {'name': "buildbot-full",
#      'slavename': "bot1name",
#      'builddir': "full",
#      'factory': f1,
#      }
#c['builders'] = [b1]

# LSB builds

lsb_builds = []
indep_added = []

for arch in lsb_archs:
    # SDK.  This is unique because it is used to build everything else.  So
    # we have to build it with a known good SDK, install it, and use that
    # to build everything else.  The build is separated into two parts: 
    # build the SDK, and install it.  Additionally, a third job is included
    # that allows a manual reset to a production SDK.

    build_sdk = factory.BuildFactory()
    build_sdk.addStep(Bzr(baseURL=bzr_toplevel, 
                          defaultBranch="lsb/devel/build_env", 
                          mode="copy", workdir="build_env",
                          timeout=bzr_timeout_seconds))
    build_sdk.addStep(ShellCommand(command=["rm", "-rf", "../packaging"],
                                   name="clear-old-packaging",
                                   workdir="build_env"))
    build_sdk.addStep(ShellCommand(
            command=["bzr", "checkout", 
                     os.path.join(bzr_toplevel, "lsb/devel/packaging"),
                     "../packaging"],
            name="checkout-packaging", workdir="build_env", 
            timeout=bzr_timeout_seconds))
    build_sdk.addStep(ShellCommand(command=['reset-sdk'], name="reset-sdk",
                                   workdir="build_env", locks=[pkg_lock]))
    build_sdk.addStep(ShellCommand(command=["rm", "-rf", 
                                            "../sdk-results"],
                                   name="rm-old-results", workdir="build_env"))
    build_sdk.addStep(
        ShellCommand(command=["mkdir", "-p", "../sdk-results/build_env"],
                     name="mkdir_base", workdir="build_env"))
    build_sdk.addStep(
        lfbuildbot.LSBBuildCommand(command="cd package && make clean " + 
                                   "&& make BZRTREES=../..", 
                                   name="build_base", workdir="build_env", 
                                   haltOnFailure=True, makeargs=True,
                                   timeout=build_timeout_seconds))
    build_sdk.addStep(
        ShellCommand(command="cp package/*.rpm ../sdk-results/build_env", 
                     name="copy_base", workdir="build_env"))
    build_sdk.addStep(
        ShellCommand(command="cd package && make clean",
                     name="clean_base", workdir="build_env", alwaysRun=True))
    for sdk_project in lsb_bzr_sdk_projects:
        build_sdk.addStep(ShellCommand(command=['mkdir', '-p', 
                                                '../sdk-results/' + sdk_project],
                                       name="mkdir_" + sdk_project,
                                       workdir="packaging"))
        sdk_command = "cd " + sdk_project + \
            " && make rpm_package BZR_ROOT=../.."
        build_sdk.addStep(
            lfbuildbot.LSBBuildCommand(command=sdk_command,
                                       name="build_" + sdk_project,
                                       workdir="packaging",
                                       haltOnFailure=True, makeargs=True,
                                       timeout=build_timeout_seconds))
        build_sdk.addStep(
            ShellCommand(command="cp %s/*.rpm ../sdk-results/%s" 
                                 % (sdk_project, sdk_project),
                         name="copy_" + sdk_project, workdir="packaging"))
    build_sdk.addStep(ShellCommand(command=['tar', 'czvf', '../sdk-results.tar.gz',
                                            '../sdk-results'],
                                   name="pack-sdk", workdir="build_env"))
    build_sdk.addStep(
        FileUpload(slavesrc="../sdk-results.tar.gz", 
                   masterdest=WithProperties("lsb-sdk-%%(branch_name:-results)s%%(result_tag:-)s-%s.tar.gz" % arch),
                   workdir="build_env"))

    # A note on locks: we grab both dependent and non-dependent locks
    # for the SDK.  This is in an attempt to avoid the possibility of
    # dependent packages being triggered by version control at the same
    # time as SDK builds, which can be particularly bad as the SDK build
    # always replaces the SDK.

    lsb_builds.append(
        { 'name': 'build-sdk-' + arch, 'slavenames': ["lfbuild-" + arch],
          'builddir': 'build-sdk-' + arch, 'factory': build_sdk, 
          'category': 'lsb', 
          'locks': [nondep_job_lock.access('counting'), 
                    dep_job_lock.access('counting')] })

    reset_sdk = factory.BuildFactory()
    reset_sdk.addStep(ShellCommand(command=['reset-sdk'], name="reset-sdk",
                                   locks=[pkg_lock]))
    lsb_builds.append(
        { 'name': 'reset-sdk-' + arch, 'slavenames': ["lfbuild-" + arch],
          'builddir': 'reset-sdk-' + arch, 'factory': reset_sdk, 
          'category': 'lsb',
          'locks': [nondep_job_lock.access('counting'),
                    dep_job_lock.access('counting')] })

    # "Package subdir" projects.  These have a "package" directory in
    # them; to build their packages, you go to the package directory
    # and type "make".  (Well, more than that; see the custom builder
    # class we use.)

    for prj in lsb_pkg_subdir_projects:
        if prj in lsb_arch_indep_projects:
            if prj in indep_added:
                continue
            else:
                buildslaves = ["lfbuild-" + lsb_buildslave_arch_indep_arch]
                build_arch = lsb_buildslave_arch_indep_arch
                indep_added.append(prj)
        else:
            buildslaves = ["lfbuild-" + arch]
            build_arch = arch

        b = factory.BuildFactory()
        b.addStep(lfbuildbot.LSBReloadSDK(name="reload-sdk", locks=[pkg_lock]))
        add_pre_dependency_triggers(prj, build_arch, b)
        b.addStep(Bzr(baseURL=bzr_toplevel,
                      defaultBranch="lsb/devel/%s" % prj,
                      mode="copy", timeout=bzr_timeout_seconds, workdir=prj))
        for other_repo in lsb_pkg_subdir_projects[prj]:
            if always_pull_from_devel(other_repo):
                checkout_url = "%s/lsb/devel/%s" % (bzr_toplevel, other_repo)
            else:
                checkout_url = "%s/lsb/%%(branch_name)s/%s" \
                    % (bzr_toplevel, other_repo)

            b.addStep(ShellCommand(command=["rm", "-rf", "../" + other_repo],
                                   name="clear-old-" + other_repo,
                                   workdir=prj))
            b.addStep(ShellCommand(
                    command=["bzr", "checkout", 
                             WithProperties(checkout_url),
                             "../" + other_repo],
                    name="checkout-" + other_repo, timeout=bzr_timeout_seconds,
                    workdir=prj))
        b.addStep(ShellCommand(command=["rm", "-rf", "../results"], 
                               name="clear-old-results", workdir=prj))
        b.addStep(ShellCommand(command=["mkdir", "-p", "../results"],
                               name="create-results-dir", workdir=prj))
        b.addStep(lfbuildbot.LSBBuildPackage(name="build", haltOnFailure=True,
                                             timeout=build_timeout_seconds,
                                             workdir=prj))
        b.addStep(ShellCommand(
                command="find -L package -name '*.rpm' " +
                        "-exec cp '{}' ../results ';'",
                name="copy-results", workdir=prj))
        b.addStep(ShellCommand(command=["tar", "czvf", "../results.tar.gz", 
                                        "../results"],
                               name="pack-results", workdir=prj))
        b.addStep(
            FileUpload(slavesrc="../results.tar.gz", 
                       masterdest=WithProperties("%s-%%(branch_name:-results)s%%(result_tag:-)s-%s.tar.gz" % (prj, build_arch)),
                       name="upload-results", workdir=prj))
        add_post_dependency_triggers(prj, build_arch, b)
        b.addStep(ShellCommand(command=["rm", "-rf", "../results"],
                               name="clear-results-dir", workdir=prj))

        if prj in lsb_dependencies:
            locks = [dep_job_lock.access('counting')]
        else:
            locks = [nondep_job_lock.access('counting')]

        lsb_builds.append(
            { 'name': '%s-%s' % (prj, build_arch), 'slavenames': buildslaves,
              'builddir': "%s-%s" % (prj, build_arch), 'factory': b, 
              'category': 'lsb', 'locks': locks })

    # "Packaging" projects.  These are actually built from a separate
    # bzr tree, called "packaging", which contains the instructions for
    # building those packages.

    for (prj, repo) in lsb_packaging_projects:
        if prj in lsb_arch_indep_projects:
            if prj in indep_added:
                continue
            else:
                buildslaves = ["lfbuild-" + lsb_buildslave_arch_indep_arch]
                build_arch = lsb_buildslave_arch_indep_arch
                indep_added.append(prj)
        else:
            buildslaves = ["lfbuild-" + arch]
            build_arch = arch

        b = factory.BuildFactory()
        b.addStep(lfbuildbot.LSBReloadSDK(name="reload-sdk", locks=[pkg_lock]))
        add_pre_dependency_triggers(prj, build_arch, b)
        if repo is not None:
            b.addStep(Bzr(baseURL=bzr_toplevel,
                          defaultBranch="lsb/devel/%s" % repo,
                          workdir=repo, mode="update",
                          timeout=bzr_timeout_seconds))
        b.addStep(ShellCommand(command=["rm", "-rf", "../packaging"],
                               name="clear-old-packaging"))
        b.addStep(ShellCommand(
                command=["bzr", "checkout", 
                         WithProperties("%s/lsb/%%(branch_name)s/packaging"
                                        % bzr_toplevel),
                         "../packaging"],
                name="checkout-packaging", timeout=bzr_timeout_seconds))
        b.addStep(ShellCommand(command=["rm", "-rf", "../results"],
                               name="clear-old-results"))
        b.addStep(ShellCommand(command=["mkdir", "-p", "../results"],
                               name="make-results-dir"))
        b.addStep(
            lfbuildbot.LSBBuildFromPackaging(subdir=prj,
                                             env={"BZRTREES": ".."},
                                             name="build", haltOnFailure=True,
                                             timeout=build_timeout_seconds))
        b.addStep(ShellCommand(
                command="find ../packaging -name '*.rpm' " +
                        "-exec cp '{}' ../results ';'",
                name="copy-results"))
        b.addStep(ShellCommand(command=["tar", "czvf", "../results.tar.gz", 
                                        "../results"],
                               name="pack-results"))
        b.addStep(
            FileUpload(slavesrc="../results.tar.gz", 
                       masterdest=WithProperties("%s-%%(branch_name:-results)s%%(result_tag:-)s-%s.tar.gz" % (prj, build_arch)),
                       name="upload-results"))
        add_post_dependency_triggers(prj, build_arch, b)
        b.addStep(ShellCommand(command=["rm", "-rf", "../results"],
                               name="clear-results-dir"))

        if prj in lsb_dependencies:
            locks = [dep_job_lock.access('counting')]
        else:
            locks = [nondep_job_lock.access('counting')]
        if repo in repo_locks:
            locks.append(repo_locks[repo].access('counting'))

        lsb_builds.append(
            { 'name': '%s-%s' % (prj, build_arch), 'slavenames': buildslaves,
              'builddir': "%s-%s" % (prj, build_arch), 'factory': b, 
              'category': 'lsb', 'locks': locks })

    # Weird builds.  These don't conform to one of the patterns, and
    # so have to be custom.

    # Builds based on appbat (appbat and libbat).

    libbat = factory.BuildFactory()

    libbat.addStep(lfbuildbot.LSBReloadSDK(name="reload-sdk", 
                                           locks=[pkg_lock]))

    add_pre_dependency_triggers("libbat", arch, libbat)

    libbat.addStep(Bzr(baseURL=bzr_toplevel, defaultBranch="lsb/devel/appbat",
                       workdir="appbat", mode="copy",
                       timeout=bzr_timeout_seconds))
    libbat.addStep(ShellCommand(command=["rm", "-rf", "../tools"],
                                workdir="appbat", name="clear-old-nalfs"))
    libbat.addStep(ShellCommand(command=["mkdir", "-p", "../tools"],
                                workdir="appbat", name="create-tools-dir"))
    libbat.addStep(ShellCommand(command=["bzr", "checkout", 
                                         os.path.join(bzr_toplevel, 
                                                      "lsb/devel/nALFS")],
                                workdir="tools", name="checkout-nalfs",
                                timeout=bzr_timeout_seconds))
    libbat.addStep(ShellCommand(command=["rm", "-rf", "../results"], 
                                workdir="appbat", name="clear-old-results"))
    libbat.addStep(ShellCommand(command=["mkdir", "-p", "../results"],
                                workdir="appbat", name="create-results-dir"))
    libbat.addStep(ShellCommand(command=["mkdir", "-p", 
                                         "/tmp/appbat-pkgcache"],
                                workdir="appbat", name="create-pkgcache"))
    libbat.addStep(ShellCommand(command="cp /tmp/appbat-pkgcache/* packages",
                                workdir="appbat", name="copy-pkgcache",
                                flunkOnFailure=False, haltOnFailure=False))
    libbat.addStep(ShellCommand(command="rm -f /tmp/appbat-pkgcache/*",
                                workdir="appbat", name="clear-pkgcache",
                                flunkOnFailure=False, haltOnFailure=False))
    libbat.addStep(
        lfbuildbot.LSBConfigureAppbat(command=["./configure.libbat"],
                                      workdir="appbat", name="configure"))
    libbat.addStep(ShellCommand(command="make check || rm -f packages/*.tar*",
                                workdir="appbat", name="check-pkgcache"))
    libbat.addStep(
        lfbuildbot.LSBBuildAppbat(command="make libbat ENTITYCHECK_QUIET=-q", 
                                  workdir="appbat",
                                  timeout=build_timeout_seconds))
    libbat.addStep(
        lfbuildbot.LSBBuildCommand(command=["make", "check-libbat"],
                                   workdir="appbat",
                                   name="check-libbat", haltOnFailure=True))
    libbat.addStep(
        lfbuildbot.LSBBuildCommand(command="cd rpm && make libbat",
                                   name="build-pkg", workdir="appbat"))
    libbat.addStep(ShellCommand(
            command="find rpm -name '*.rpm' -exec cp '{}' ../results ';'",
            workdir="appbat", name="copy-results"))
    libbat.addStep(ShellCommand(command=["tar", "czvf", "../results.tar.gz", 
                                         "../results"],
                                workdir="appbat", name="pack-results"))
    libbat.addStep(
        FileUpload(slavesrc="../results.tar.gz", 
                   masterdest=WithProperties("libbat-%%(branch_name:-results)s%%(result_tag:-)s-%s.tar.gz" % arch),
                   workdir="appbat", name="upload-results"))
    libbat.addStep(
        ShellCommand(command="cp packages/*tar* /tmp/appbat-pkgcache",
                     workdir="appbat", name="save-pkgcache",
                     flunkOnFailure=False, haltOnFailure=False))

    add_post_dependency_triggers("libbat", arch, libbat)

    if "libbat" in lsb_dependencies:
        locks = [dep_job_lock.access('counting')]
    else:
        locks = [nondep_job_lock.access('counting')]

    lsb_builds.append(
        { 'name': 'libbat-' + arch, 'slavenames': buildslaves,
          'builddir': 'libbat-' + arch, 'factory': libbat,
          'category': 'lsb', 'locks': locks })

    appbat = factory.BuildFactory()

    appbat.addStep(lfbuildbot.LSBReloadSDK(name="reload-sdk",
                                           locks=[pkg_lock]))

    add_pre_dependency_triggers("appbat", arch, appbat)

    appbat.addStep(Bzr(baseURL=bzr_toplevel, defaultBranch="lsb/devel/appbat",
                       workdir="appbat", mode="copy",
                       timeout=bzr_timeout_seconds))
    appbat.addStep(ShellCommand(command=["rm", "-rf", "../tools"],
                                workdir="appbat", name="clear-old-nalfs"))
    appbat.addStep(ShellCommand(command=["mkdir", "-p", "../tools"],
                                workdir="appbat", name="create-tools-dir"))
    appbat.addStep(ShellCommand(command=["bzr", "checkout", 
                                         os.path.join(bzr_toplevel, 
                                                      "lsb/devel/nALFS")],
                                workdir="tools", name="checkout-nalfs",
                                timeout=bzr_timeout_seconds))
    appbat.addStep(ShellCommand(command=["rm", "-rf", "../results"], 
                                workdir="appbat", name="clear-old-results"))
    appbat.addStep(ShellCommand(command=["mkdir", "-p", "../results"],
                                workdir="appbat", name="create-results-dir"))
    appbat.addStep(
        lfbuildbot.LSBConfigureAppbat(command=["./configure"],
                                      workdir="appbat", name="configure"))
    appbat.addStep(
        lfbuildbot.LSBBuildAppbat(command="make appbat ENTITYCHECK_QUIET=-q", 
                                  workdir="appbat", name="build-appbat", 
                                  timeout=build_timeout_seconds))
    appbat.addStep(
        lfbuildbot.LSBBuildCommand(command=["make", "check-appbat"],
                                   workdir="appbat",
                                   name="check-appbat", haltOnFailure=True))
    appbat.addStep(
        lfbuildbot.LSBBuildAppbat(command="make desktop ENTITYCHECK_QUIET=-q", 
                                  workdir="appbat", name="build-desktop", 
                                  timeout=build_timeout_seconds))
    appbat.addStep(
        lfbuildbot.LSBBuildCommand(command=["make", "check-desktop"],
                                   workdir="appbat",
                                   name="check-desktop", haltOnFailure=True))
    appbat.addStep(
        lfbuildbot.LSBBuildAppbat(command="make addons ENTITYCHECK_QUIET=-q", 
                                  workdir="appbat", name="build-addons",
                                  timeout=build_timeout_seconds))
    appbat.addStep(
        lfbuildbot.LSBBuildCommand(command=["make", "check-addons"],
                                   workdir="appbat",
                                   name="check-addons", haltOnFailure=True))
    appbat.addStep(
        lfbuildbot.LSBBuildCommand(command="cd rpm && make",
                                   name="build-pkg", workdir="appbat",
                                   timeout=build_timeout_seconds))
    appbat.addStep(ShellCommand(
            command="find rpm -name '*.rpm' -exec cp '{}' ../results ';'",
            workdir="appbat", name="copy-results"))
    appbat.addStep(ShellCommand(command=["run-appbat-tests", 
                                         "../results", "../results/tests"],
                                workdir="appbat", name="run-appbat-tests"))
    appbat.addStep(ShellCommand(command=["tar", "czvf", "../results.tar.gz", 
                                         "../results"],
                                workdir="appbat", name="pack-results"))
    appbat.addStep(
        FileUpload(slavesrc="../results.tar.gz", 
                   masterdest=WithProperties("appbat-%%(branch_name:-results)s%%(result_tag:-)s-%s.tar.gz" % arch),
                   workdir="appbat", name="upload-results", 
                   flunkOnFailure=False))
    add_post_dependency_triggers("appbat", arch, appbat)

    if "appbat" in lsb_dependencies:
        locks = [dep_job_lock.access('counting')]
    else:
        locks = [nondep_job_lock.access('counting')]

    lsb_builds.append(
        { 'name': 'appbat-' + arch, 'slavenames': buildslaves,
          'builddir': 'appbat-' + arch, 'factory': appbat,
          'category': 'lsb', 'locks': locks })

    devchk = factory.BuildFactory()

    devchk.addStep(lfbuildbot.LSBReloadSDK(name="reload-sdk",
                                           locks=[pkg_lock]))

    add_pre_dependency_triggers("devchk", arch, devchk)

    devchk.addStep(Bzr(baseURL=bzr_toplevel, 
                       defaultBranch="lsb/devel/misc-test",
                       workdir="misc-test", mode="copy", 
                       timeout=bzr_timeout_seconds))
    devchk.addStep(ShellCommand(command=["rm", "-rf", "../results"], 
                                workdir="misc-test", name="clear-old-results"))
    devchk.addStep(ShellCommand(command=["mkdir", "-p", "../results"],
                                workdir="misc-test", 
                                name="create-results-dir"))
    devchk.addStep(ShellCommand(command="cd devchk/ts/devchk && ./dodevchk",
                                workdir="misc-test", name="build",
                                flunkOnFailure=False))
    devchk.addStep(ShellCommand(command="cp devchk/ts/devchk/*.output devchk/ts/devchk/*.sql ../results",
                                workdir="misc-test", name="collect-results",
                                flunkOnFailure=False))
    devchk.addStep(ShellCommand(command="test $(ls ../results | wc -l) -gt 0",
                                workdir="misc-test", name="check-results",
                                haltOnFailure=True))
    devchk.addStep(ShellCommand(command=["tar", "czvf", "../results.tar.gz", 
                                         "../results"],
                                workdir="misc-test", name="pack-results"))
    devchk.addStep(
        FileUpload(slavesrc="../results.tar.gz", 
                   masterdest=WithProperties("devchk-%%(branch_name:-results)s%%(result_tag:-)s-%s.tar.gz" % arch),
                   workdir="misc-test", name="upload-results", 
                   flunkOnFailure=False))
    add_post_dependency_triggers("devchk", arch, devchk)

    if "devchk" in lsb_dependencies:
        locks = [dep_job_lock.access('counting')]
    else:
        locks = [nondep_job_lock.access('counting')]

    lsb_builds.append(
        { 'name': 'devchk-' + arch, 'slavenames': buildslaves,
          'builddir': 'devchk-' + arch, 'factory': devchk,
          'category': 'lsb', 'locks': locks })

# Final build configuration

c['builders'] = lsb_builds


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

c['status'].append(html.WebStatus(http_port=8009, allowForce=True,
                                  auth=HTPasswdAuth(web_htpasswd_path)))

c['status'].append(words.IRC(host="irc.linuxfoundation.org", nick="lsb_bb",
                             channels=["#lsb"], allowForce=True,
                             notify_events={'exception': 1,
                                            'successToFailure': 1,
                                            'failureToSuccess': 1}))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "LSB"
c['projectURL'] = "http://www.linuxbase.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://dev.linuxfoundation.org/buildbot/lsb/"

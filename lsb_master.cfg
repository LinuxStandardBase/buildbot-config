# -*- python -*-
# ex: set syntax=python:

import os

# This buildbot config file defines the LSB builds that are needed.
# 
# Each project needs one build per architecture; this includes the
# "sdk" meta-project and all the other pieces we build.  So, to
# prevent cut-n-pasting, we use conventions.  All architectures are
# defined in an architectures list, and builds are named
# "project-arch".  Schedulers for these are named "sch-project-arch".
# For the special "sdk" project, we have "build-sdk-arch" and
# "update-sdk-arch" for the two jobs that build and update the SDK.
# Their schedulers are prefixed with "sch-", like the others.

# Toplevel configuration, used by the builder/scheduler setup.

stable_timer_hours = 1
stable_timer_seconds = stable_timer_hours * 60 * 60

bzr_toplevel = "http://bzr.linuxfoundation.org/"

lsb_archs = ["x86", "x86_64", "ia64", "ppc32", "ppc64", "s390", "s390x"]
lsb_bzr_sdk_projects = ["lsbdev-base", "lsbdev-cc", "lsbdev-c++",
                        "lsbdev-desktop", "lsbdev-qt", "lsbdev-qt3"]
lsb_pkg_subdir_projects = ["makelsbpkg"]
lsb_packaging_projects = [("lsbappchk", "misc-test")]

lsb_arch_indep_projects = ["makelsbpkg"]

# This funny-sounding setting controls which architecture we hold
# responsible for building architecture-independent components.
lsb_buildslave_arch_indep_arch = "x86_64"


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("lfbuild-x86_64", "bot1passwd", max_builds=1),
               BuildSlave("lfbuild-x86", "ail1Aebu", max_builds=1),
               BuildSlave("lfbuild-ia64", "quae7Moh", max_builds=1),
               BuildSlave("lfbuild-ppc32", "AiSh4aej", max_builds=1),
               BuildSlave("lfbuild-ppc64", "ai2agaeT", max_builds=1),
               BuildSlave("lfbuild-s390", "aeGh0ooy", max_builds=1),
               BuildSlave("lfbuild-s390x", "ahtoop3O", max_builds=1)]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9988


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from bzr_buildbot import BzrPoller

c['change_source'] = []
lsb_change_sources = lsb_pkg_subdir_projects + \
    [x[1] for x in lsb_packaging_projects]
added = []
for branch in lsb_change_sources:
    if branch in added:
        continue
    c['change_source'].append(
        BzrPoller(url="%slsb/devel/%s" % (bzr_toplevel, branch),
                  branch_name="lsb/devel/" + branch))
    added.append(branch)

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

from buildbot import scheduler

# LSB schedulers

c['schedulers'] = []

for arch in lsb_archs:
    sch_build = scheduler.Nightly(name="build-sdk-" + arch, branch=None,
                                  builderNames=["build-sdk-" + arch],
                                  hour=19, minute=0)
    sch_update = scheduler.Dependent(name="update-sdk-" + arch,
                                     upstream=sch_build,
                                     builderNames=["update-sdk-" + arch])
    c['schedulers'].extend([sch_build, sch_update])

for prj in lsb_pkg_subdir_projects:
    if prj in lsb_arch_indep_projects:
        archlist = [lsb_buildslave_arch_indep_arch]
    else:
        archlist = lsb_archs
    for arch in archlist:
        prj_name = "%s-%s" % (prj, arch)
        sch = scheduler.Scheduler(name="sch-" + prj_name,
                                  branch=os.path.join("lsb/devel", prj),
                                  builderNames=[prj_name],
                                  treeStableTimer=stable_timer_seconds)
        c['schedulers'].append(sch)

for (prj, repo) in lsb_packaging_projects:
    if prj in lsb_arch_indep_projects:
        archlist = [lsb_buildslave_arch_indep_arch]
    else:
        archlist = lsb_archs
    branches = [os.path.join("lsb/devel", repo), "lsb/devel/packaging"]
    for arch in archlist:
        prj_name = "%s-%s" % (prj, arch)
        sch = \
            scheduler.AnyBranchScheduler(name="sch-" + prj_name,
                                         branches=branches,
                                         builderNames=[prj_name],
                                         treeStableTimer=stable_timer_seconds)
        c['schedulers'].append(sch)


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

#cvsroot = ":pserver:anonymous@cvs.sourceforge.net:/cvsroot/buildbot"
#cvsmodule = "buildbot"

#from buildbot.process import factory
#from buildbot.steps.source import CVS
#from buildbot.steps.shell import Compile
#from buildbot.steps.python_twisted import Trial
#f1 = factory.BuildFactory()
#f1.addStep(CVS(cvsroot=cvsroot, cvsmodule=cvsmodule, login="", mode="copy"))
#f1.addStep(Compile(command=["python", "./setup.py", "build"]))
#f1.addStep(Trial(testpath="."))

#b1 = {'name': "buildbot-full",
#      'slavename': "bot1name",
#      'builddir': "full",
#      'factory': f1,
#      }
#c['builders'] = [b1]

from buildbot.process import factory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.source import Bzr
from buildbot.steps.transfer import FileUpload
from buildbot.process.properties import WithProperties

from lfbuildbot import PropMasterShellCommand, LSBBuildPackage, \
    LSBBuildFromPackaging

# LSB builds

lsb_builds = []
indep_added = []

for arch in lsb_archs:
    build_sdk = factory.BuildFactory()
    build_sdk.addStep(Bzr(repourl=os.path.join(bzr_toplevel, 
                                               "lsb/devel/packaging"),
                          mode="copy"))
    build_sdk.addStep(Bzr(repourl=os.path.join(bzr_toplevel, 
                                               "lsb/devel/build_env"), 
                          mode="update", workdir="build_env"))
    build_sdk.addStep(ShellCommand(command=['reset-sdk'], name="reset-sdk"))
    build_sdk.addStep(ShellCommand(command=["rm", "-rf", 
                                            "../sdk-results"],
                                   name="rm-old-results"))
    for sdk_project in lsb_bzr_sdk_projects:
        build_sdk.addStep(ShellCommand(command=['mkdir', '-p', 
                                                '../sdk-results/' + sdk_project],
                                       name="mkdir_" + sdk_project))
        sdk_command = "cd " + sdk_project + \
            " && make rpm_package BZR_ROOT=../.."
        build_sdk.addStep(ShellCommand(command=sdk_command,
                                       name="build_" + sdk_project))
        build_sdk.addStep(
            ShellCommand(command="cp %s/*.rpm ../sdk-results/%s" 
                                 % (sdk_project, sdk_project),
                         name="copy_" + sdk_project))
    build_sdk.addStep(ShellCommand(command=['tar', 'czf', '../sdk-results.tar.gz',
                                            '../sdk-results'],
                                   name="pack-sdk"))
    build_sdk.addStep(
        FileUpload(slavesrc="../sdk-results.tar.gz", 
                   masterdest="lsb-sdk-results-%s.tar.gz" % arch))
    lsb_builds.append(
        { 'name': 'build-sdk-' + arch, 'slavenames': ["lfbuild-" + arch],
          'builddir': 'build-sdk-' + arch, 'factory': build_sdk, 
          'category': 'lsb' })

    update_sdk = factory.BuildFactory()
    update_sdk.addStep(
        ShellCommand(command=['update-sdk', 
                              '../../build-sdk-%s/sdk-results' % arch]))
    lsb_builds.append(
        { 'name': 'update-sdk-' + arch, 'slavenames': ["lfbuild-" + arch],
          'builddir': 'update-sdk-' + arch, 'factory': update_sdk, 
          'category': 'lsb' })

    for prj in lsb_pkg_subdir_projects:
        if prj in lsb_arch_indep_projects:
            if prj in indep_added:
                continue
            else:
                buildslaves = ["lfbuild-" + lsb_buildslave_arch_indep_arch]
                build_arch = lsb_buildslave_arch_indep_arch
                indep_added.append(prj)
        else:
            buildslaves = ["lfbuild-" + arch]
            build_arch = arch

        b = factory.BuildFactory()
        b.addStep(Bzr(baseURL=bzr_toplevel,
                      defaultBranch="lsb/devel/%s" % prj,
                      mode="copy", timeout=4*60*60))
        b.addStep(LSBBuildPackage())
        b.addStep(ShellCommand(command=["rm", "-rf", "../results"]))
        b.addStep(ShellCommand(command=["mkdir", "-p", "../results"]))
        b.addStep(ShellCommand(command="cp package/*.rpm ../results"))
        b.addStep(ShellCommand(command=["tar", "czf", "../results.tar.gz", 
                                        "../results"]))
        b.addStep(ShellCommand(command=["rm", "-rf", "../results"]))
        b.addStep(FileUpload(slavesrc="../results.tar.gz", 
                             masterdest="%s-results-%s.tar.gz" % (prj, 
                                                                  build_arch)))

        lsb_builds.append(
            { 'name': '%s-%s' % (prj, build_arch), 'slavenames': buildslaves,
              'builddir': "%s-%s" % (prj, build_arch), 'factory': b, 
              'category': 'lsb' })

    for (prj, repo) in lsb_packaging_projects:
        if prj in lsb_arch_indep_projects:
            if prj in indep_added:
                continue
            else:
                buildslaves = ["lfbuild-" + lsb_buildslave_arch_indep_arch]
                build_arch = lsb_buildslave_arch_indep_arch
                indep_added.append(prj)
        else:
            buildslaves = ["lfbuild-" + arch]
            build_arch = arch

        b = factory.BuildFactory()
        b.addStep(Bzr(baseURL=bzr_toplevel,
                      defaultBranch="lsb/devel/%s" % repo,
                      workdir=repo, mode="update", timeout=4*60*60))
        b.addStep(ShellCommand(command=["rm", "-rf", "../packaging"]))
        b.addStep(ShellCommand(
                command=["bzr", "checkout", 
                         os.path.join(bzr_toplevel, "lsb/devel/packaging"),
                         "../packaging"]))
        b.addStep(LSBBuildFromPackaging(subdir=prj,
                                        env={"BZRTREES": ".."}))
        b.addStep(ShellCommand(command=["rm", "-rf", "../results"]))
        b.addStep(ShellCommand(command=["mkdir", "-p", "../results"]))
        b.addStep(ShellCommand(command="cp ../packaging/%s/*.rpm ../results" % prj))
        b.addStep(ShellCommand(command=["tar", "czf", "../results.tar.gz", 
                                        "../results"]))
        b.addStep(ShellCommand(command=["rm", "-rf", "../results"]))
        b.addStep(FileUpload(slavesrc="../results.tar.gz", 
                             masterdest="%s-results-%s.tar.gz" % (prj, 
                                                                  build_arch)))

        lsb_builds.append(
            { 'name': '%s-%s' % (prj, build_arch), 'slavenames': buildslaves,
              'builddir': "%s-%s" % (prj, build_arch), 'factory': b, 
              'category': 'lsb' })

# Final build configuration

c['builders'] = lsb_builds


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8009, allowForce=False))

from buildbot.status import words
c['status'].append(words.IRC(host="irc.linuxfoundation.org", nick="lsb_bb",
                             channels=["#lsb"], allowForce=True,
                             notify_events={'exception': 1,
                                            'successToFailure': 1,
                                            'failureToSuccess': 1}))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "LSB"
c['projectURL'] = "http://www.linuxbase.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://dev.linuxfoundation.org/buildbot/lsb/"

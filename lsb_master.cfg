# -*- python -*-
# ex: set syntax=python:

import os

from buildbot import scheduler
from buildbot.buildslave import BuildSlave
from buildbot.process import factory
from buildbot.steps import trigger
from buildbot.steps.shell import ShellCommand, Configure, Compile
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.source import Bzr
from buildbot.steps.transfer import FileUpload
from buildbot.process.properties import WithProperties
from buildbot.status import html
from buildbot.status import words

from lfbuildbot import PropMasterShellCommand, LSBBuildPackage, \
    LSBBuildFromPackaging

from bzr_buildbot import BzrPoller

# This buildbot config file defines the LSB builds that are needed.
# 
# Each project needs one build per architecture; this includes the
# "sdk" meta-project and all the other pieces we build.  So, to
# prevent cut-n-pasting, we use conventions.  All architectures are
# defined in an architectures list, and builds are named
# "project-arch".  Schedulers for these are named "sch-project-arch".
# For the special "sdk" project, we have "build-sdk-arch" and
# "update-sdk-arch" for the two jobs that build and update the SDK.
# Their schedulers are prefixed with "sch-", like the others.

# Toplevel configuration, used by the builder/scheduler setup.

stable_timer_hours = 1
stable_timer_seconds = stable_timer_hours * 60 * 60

bzr_toplevel = "http://bzr.linuxfoundation.org/"

lsb_archs = ["x86_64", "x86", "ia64", "ppc32", "ppc64", "s390", "s390x"]
lsb_bzr_sdk_projects = ["lsbdev-base", "lsbdev-cc", "lsbdev-c++",
                        "lsbdev-desktop", "lsbdev-qt", "lsbdev-qt3"]
lsb_pkg_subdir_projects = ["app-checker", "azov-qt3-tests", "azov-qt4-tests",
                           "azov-xml2-tests", "desktop-test", "dtk-manager", 
                           "libstdcpp-test", "lsb-setup", "lsb-xvfb", 
                           "lsbappchk-perl", "lsbappchk-python", 
                           "lsbappchk-sh", "lsbsi-tools", 
                           "makelsbpkg", "olver-core-tests", "perl-test",
                           "printing-test", "python-test", "qmtest-harness",
                           "runtime-test", "t2c-cpp-tests", 
                           "t2c-desktop-tests", "task-pkgs", "tet-harness", 
                           "xts5-test"]
lsb_packaging_projects = [("lsbappchk", "misc-test"),
                          ("lsbarchk", "misc-test"),
                          ("lsbcmdchk", "misc-test"),
                          ("lsbdev-runner", "build_env"),
                          ("lsblibchk", "misc-test"),
                          ("lsbpkgchk", "misc-test")]

lsb_arch_indep_projects = ["lsb-setup", "lsbappchk-perl", "lsbappchk-python", 
                           "lsbappchk-sh", "perl-test", "task-pkgs"]

lsb_dependencies = { "tet-harness": ["azov-qt3-tests", "azov-qt4-tests",
                                     "azov-xml2-tests", "desktop-test", 
                                     "printing-test", "runtime-test", 
                                     "t2c-cpp-tests", "t2c-desktop-tests", 
                                     "xts5-test"],
                     "qmtest-harness": ["libstdcpp-test"],
                     "lsbappchk-python": ["python-test"],
                     "libbat": ["appbat"] }

# This funny-sounding setting controls which architecture we hold
# responsible for building architecture-independent components.
lsb_buildslave_arch_indep_arch = "x86_64"

# Helper functions

def add_dependency_triggers(project, arch, builder):
    pkg_install_command = \
        "ls ../results/*.rpm | egrep -v src.rpm | " + \
        "xargs sudo rpm -Uvh --force"
    if project in lsb_dependencies:
        prj_name = "%s-%s" % (project, arch)

        builder.addStep(ShellCommand(command=pkg_install_command, 
                                     name="update-pkgs",
                                     flunkOnFailure=False))

        # Actual dependencies are too difficult to do now; the
        # SourceStamp of the previous build gets propagated
        # to the dependent builds.  So let's disable for now.

        #for subprj in lsb_dependencies[project]:
        #    subprj_name = "%s-%s" % (subprj, arch)
        #    builder.addStep(
        #        trigger.Trigger(name="trigger-" + subprj_name,
        #                        schedulerNames=['trigger-' + subprj_name],
        #                        waitForFinish=False, updateSourceStamp=False))


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
c['slaves'] = [BuildSlave("lfbuild-x86_64", "bot1passwd", max_builds=1),
               BuildSlave("lfbuild-x86", "ail1Aebu", max_builds=1),
               BuildSlave("lfbuild-ia64", "quae7Moh", max_builds=1),
               BuildSlave("lfbuild-ppc32", "AiSh4aej", max_builds=1),
               BuildSlave("lfbuild-ppc64", "ai2agaeT", max_builds=1),
               BuildSlave("lfbuild-s390", "aeGh0ooy", max_builds=1),
               BuildSlave("lfbuild-s390x", "ahtoop3O", max_builds=1)]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9988


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

c['change_source'] = []
lsb_change_sources = lsb_pkg_subdir_projects + \
    [x[1] for x in lsb_packaging_projects] + ["appbat"]
added = []
for branch in lsb_change_sources:
    if branch in added:
        continue
    c['change_source'].append(
        BzrPoller(url="%slsb/devel/%s" % (bzr_toplevel, branch),
                  branch_name="lsb/devel/" + branch))
    added.append(branch)

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

# LSB schedulers

# Build the SDK daily.  Since it's not complicated, we can schedule
# all the builds with a single scheduler.

sch_sdk_names = ["build-sdk-" + x for x in lsb_archs]
sch_build = scheduler.Nightly(name="build-sdk", branch=None,
                              builderNames=sch_sdk_names, hour=19, minute=0)

c['schedulers'] = [sch_build]

# Collect project names for the weekly scheduler.

sch_weekly_names = []

# The rest of the schedulers (except the weekly one) react to events, 
# such as a previous build succeeding or a change in version control,
# and so have to be defined per project and per architecture.  These
# first schedulers handle updating the SDK after a successful build,
# as well as the appbat.

for arch in lsb_archs:
    sch_update = scheduler.Triggerable(name="update-sdk-" + arch,
                                       builderNames=["update-sdk-" + arch])
    sch_libbat = scheduler.Scheduler(name="sch-libbat-" + arch,
                                     branch="lsb/devel/appbat",
                                     builderNames=["libbat-" + arch],
                                     treeStableTimer=stable_timer_seconds)
    sch_appbat = scheduler.Triggerable(name="sch-appbat-" + arch,
                                       builderNames=["appbat-" + arch])

    c['schedulers'].extend([sch_update, sch_libbat, sch_appbat])

    sch_weekly_names.append("libbat-" + arch)

# Package subdir schedulers.

for prj in lsb_pkg_subdir_projects:
    if prj in lsb_arch_indep_projects:
        archlist = [lsb_buildslave_arch_indep_arch]
    else:
        archlist = lsb_archs
    for arch in archlist:
        prj_name = "%s-%s" % (prj, arch)
        sch = scheduler.Scheduler(name="sch-" + prj_name,
                                  branch=os.path.join("lsb/devel", prj),
                                  builderNames=[prj_name],
                                  treeStableTimer=stable_timer_seconds)
        c['schedulers'].append(sch)

        for deplist in lsb_dependencies.itervalues():
            if prj in deplist:
                sch = scheduler.Triggerable(name="trigger-" + prj_name,
                                            builderNames=[prj_name])
                c['schedulers'].append(sch)
                break

        sch_weekly_names.append(prj_name)

# Packaging project schedulers.

for (prj, repo) in lsb_packaging_projects:
    if prj in lsb_arch_indep_projects:
        archlist = [lsb_buildslave_arch_indep_arch]
    else:
        archlist = lsb_archs
    branches = [os.path.join("lsb/devel", repo), "lsb/devel/packaging"]
    for arch in archlist:
        prj_name = "%s-%s" % (prj, arch)
        sch = \
            scheduler.AnyBranchScheduler(name="sch-" + prj_name,
                                         branches=branches,
                                         builderNames=[prj_name],
                                         treeStableTimer=stable_timer_seconds)
        c['schedulers'].append(sch)

        sch_weekly_names.append(prj_name)

# Finally, the big weekly scheduler.  This makes sure every non-SDK
# project is built at least once a week.

sch_weekly = scheduler.Nightly(name="sch-weekly", branch=None,
                               builderNames=sch_weekly_names,
                               dayOfWeek=5, hour=0, minute=0)
c['schedulers'].append(sch_weekly)


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

#cvsroot = ":pserver:anonymous@cvs.sourceforge.net:/cvsroot/buildbot"
#cvsmodule = "buildbot"

#from buildbot.process import factory
#from buildbot.steps.source import CVS
#from buildbot.steps.shell import Compile
#from buildbot.steps.python_twisted import Trial
#f1 = factory.BuildFactory()
#f1.addStep(CVS(cvsroot=cvsroot, cvsmodule=cvsmodule, login="", mode="copy"))
#f1.addStep(Compile(command=["python", "./setup.py", "build"]))
#f1.addStep(Trial(testpath="."))

#b1 = {'name': "buildbot-full",
#      'slavename': "bot1name",
#      'builddir': "full",
#      'factory': f1,
#      }
#c['builders'] = [b1]

# LSB builds

lsb_builds = []
indep_added = []

for arch in lsb_archs:
    # SDK.  This is unique because it is used to build everything else.  So
    # we have to build it with a known good SDK, install it, and use that
    # to build everything else.  There are two separate jobs here: build
    # the SDK, and install it.

    build_sdk = factory.BuildFactory()
    build_sdk.addStep(Bzr(repourl=os.path.join(bzr_toplevel, 
                                               "lsb/devel/packaging"),
                          mode="copy"))
    build_sdk.addStep(Bzr(repourl=os.path.join(bzr_toplevel, 
                                               "lsb/devel/build_env"), 
                          mode="update", workdir="build_env"))
    build_sdk.addStep(ShellCommand(command=['reset-sdk'], name="reset-sdk"))
    build_sdk.addStep(ShellCommand(command=["rm", "-rf", 
                                            "../sdk-results"],
                                   name="rm-old-results"))
    for sdk_project in lsb_bzr_sdk_projects:
        build_sdk.addStep(ShellCommand(command=['mkdir', '-p', 
                                                '../sdk-results/' + sdk_project],
                                       name="mkdir_" + sdk_project))
        sdk_command = "cd " + sdk_project + \
            " && make rpm_package BZR_ROOT=../.."
        build_sdk.addStep(ShellCommand(command=sdk_command,
                                       name="build_" + sdk_project))
        build_sdk.addStep(
            ShellCommand(command="cp %s/*.rpm ../sdk-results/%s" 
                                 % (sdk_project, sdk_project),
                         name="copy_" + sdk_project))
    build_sdk.addStep(ShellCommand(command=['tar', 'czf', '../sdk-results.tar.gz',
                                            '../sdk-results'],
                                   name="pack-sdk"))
    build_sdk.addStep(
        FileUpload(slavesrc="../sdk-results.tar.gz", 
                   masterdest="lsb-sdk-results-%s.tar.gz" % arch))
    build_sdk.addStep(
        trigger.Trigger(name="trigger-update-sdk-" + arch,
                        schedulerNames=['update-sdk-' + arch],
                        waitForFinish=False, updateSourceStamp=False))
    lsb_builds.append(
        { 'name': 'build-sdk-' + arch, 'slavenames': ["lfbuild-" + arch],
          'builddir': 'build-sdk-' + arch, 'factory': build_sdk, 
          'category': 'lsb' })

    update_sdk = factory.BuildFactory()
    update_sdk.addStep(
        ShellCommand(command=['update-sdk', 
                              '../../build-sdk-%s/sdk-results' % arch]))
    lsb_builds.append(
        { 'name': 'update-sdk-' + arch, 'slavenames': ["lfbuild-" + arch],
          'builddir': 'update-sdk-' + arch, 'factory': update_sdk, 
          'category': 'lsb' })

    # "Package subdir" projects.  These have a "package" directory in
    # them; to build their packages, you go to the package directory
    # and type "make".  (Well, more than that; see the custom builder
    # class we use.)

    for prj in lsb_pkg_subdir_projects:
        if prj in lsb_arch_indep_projects:
            if prj in indep_added:
                continue
            else:
                buildslaves = ["lfbuild-" + lsb_buildslave_arch_indep_arch]
                build_arch = lsb_buildslave_arch_indep_arch
                indep_added.append(prj)
        else:
            buildslaves = ["lfbuild-" + arch]
            build_arch = arch

        b = factory.BuildFactory()
        b.addStep(Bzr(baseURL=bzr_toplevel,
                      defaultBranch="lsb/devel/%s" % prj,
                      mode="copy", timeout=4*60*60))
        b.addStep(ShellCommand(command=["rm", "-rf", "../results"], 
                               name="clear-old-results"))
        b.addStep(ShellCommand(command=["mkdir", "-p", "../results"],
                               name="create-results-dir"))
        b.addStep(LSBBuildPackage(name="build", haltOnFailure=True))
        b.addStep(ShellCommand(
                command="find -L package -name '*.rpm' " +
                        "-exec cp '{}' ../results ';'",
                name="copy-results"))
        b.addStep(ShellCommand(command=["tar", "czf", "../results.tar.gz", 
                                        "../results"],
                               name="pack-results"))
        b.addStep(FileUpload(slavesrc="../results.tar.gz", 
                             masterdest="%s-results-%s.tar.gz" % (prj, 
                                                                  build_arch),
                             name="upload-results"))
        add_dependency_triggers(prj, build_arch, b)
        b.addStep(ShellCommand(command=["rm", "-rf", "../results"],
                               name="clear-results-dir"))

        lsb_builds.append(
            { 'name': '%s-%s' % (prj, build_arch), 'slavenames': buildslaves,
              'builddir': "%s-%s" % (prj, build_arch), 'factory': b, 
              'category': 'lsb' })

    # "Packaging" projects.  These are actually built from a separate
    # bzr tree, called "packaging", which contains the instructions for
    # building those packages.

    for (prj, repo) in lsb_packaging_projects:
        if prj in lsb_arch_indep_projects:
            if prj in indep_added:
                continue
            else:
                buildslaves = ["lfbuild-" + lsb_buildslave_arch_indep_arch]
                build_arch = lsb_buildslave_arch_indep_arch
                indep_added.append(prj)
        else:
            buildslaves = ["lfbuild-" + arch]
            build_arch = arch

        b = factory.BuildFactory()
        b.addStep(Bzr(baseURL=bzr_toplevel,
                      defaultBranch="lsb/devel/%s" % repo,
                      workdir=repo, mode="update", timeout=4*60*60))
        b.addStep(ShellCommand(command=["rm", "-rf", "../packaging"],
                               name="clear-old-packaging"))
        b.addStep(ShellCommand(
                command=["bzr", "checkout", 
                         os.path.join(bzr_toplevel, "lsb/devel/packaging"),
                         "../packaging"],
                name="checkout-packaging"))
        b.addStep(ShellCommand(command=["rm", "-rf", "../results"],
                               name="clear-old-results"))
        b.addStep(ShellCommand(command=["mkdir", "-p", "../results"],
                               name="make-results-dir"))
        b.addStep(LSBBuildFromPackaging(subdir=prj,
                                        env={"BZRTREES": ".."},
                                        name="build", haltOnFailure=True))
        b.addStep(ShellCommand(
                command="find ../packaging -name '*.rpm' " +
                        "-exec cp '{}' ../results ';'",
                name="copy-results"))
        b.addStep(ShellCommand(command=["tar", "czf", "../results.tar.gz", 
                                        "../results"],
                               name="pack-results"))
        b.addStep(FileUpload(slavesrc="../results.tar.gz", 
                             masterdest="%s-results-%s.tar.gz" % (prj, 
                                                                  build_arch),
                             name="upload-results"))
        add_dependency_triggers(prj, build_arch, b)
        b.addStep(ShellCommand(command=["rm", "-rf", "../results"],
                               name="clear-results-dir"))

        lsb_builds.append(
            { 'name': '%s-%s' % (prj, build_arch), 'slavenames': buildslaves,
              'builddir': "%s-%s" % (prj, build_arch), 'factory': b, 
              'category': 'lsb' })

    # Weird builds.  These don't conform to one of the patterns, and
    # so have to be custom.

    libbat = factory.BuildFactory()

    libbat.addStep(Bzr(baseURL=bzr_toplevel, defaultBranch="lsb/devel/appbat",
                       workdir="appbat", mode="copy", timeout=4*60*60))
    libbat.addStep(ShellCommand(command=["rm", "-rf", "../tools"],
                                workdir="appbat", name="clear-old-nalfs"))
    libbat.addStep(ShellCommand(command=["mkdir", "-p", "../tools"],
                                workdir="appbat", name="create-tools-dir"))
    libbat.addStep(ShellCommand(command=["bzr", "checkout", 
                                         os.path.join(bzr_toplevel, 
                                                      "lsb/devel/nALFS")],
                                workdir="tools", name="checkout-nalfs"))
    libbat.addStep(ShellCommand(command=["rm", "-rf", "../results"], 
                                workdir="appbat", name="clear-old-results"))
    libbat.addStep(ShellCommand(command=["mkdir", "-p", "../results"],
                                workdir="appbat", name="create-results-dir"))
    libbat.addStep(Configure(command=["./configure.libbat"], workdir="appbat"))
    libbat.addStep(Compile(command=["make", "libbat", "ENTITYCHECK_QUIET=-q"], 
                           workdir="appbat"))
    libbat.addStep(ShellCommand(command="cd rpm && make libbat",
                                name="build-pkg", workdir="appbat"))
    libbat.addStep(ShellCommand(
            command="find rpm -name '*.rpm' -exec cp '{}' ../results ';'",
            workdir="appbat", name="copy-results"))
    libbat.addStep(ShellCommand(command=["tar", "czf", "../results.tar.gz", 
                                         "../results"],
                                workdir="appbat", name="pack-results"))
    libbat.addStep(
        FileUpload(slavesrc="../results.tar.gz", 
                   masterdest="libbat-results-%s.tar.gz" % build_arch,
                   workdir="appbat", name="upload-results"))
    add_dependency_triggers("libbat", build_arch, libbat)
    libbat.addStep(trigger.Trigger(schedulerNames=["sch-appbat-" + build_arch],
                                   waitForFinish=False,
                                   updateSourceStamp=False))

    lsb_builds.append(
        { 'name': 'libbat-' + build_arch, 'slavenames': buildslaves,
          'builddir': 'libbat-' + build_arch, 'factory': libbat,
          'category': 'lsb' })

    appbat = factory.BuildFactory()

    appbat.addStep(Bzr(baseURL=bzr_toplevel, defaultBranch="lsb/devel/appbat",
                       workdir="appbat", mode="copy", timeout=4*60*60))
    appbat.addStep(ShellCommand(command=["rm", "-rf", "../tools"],
                                workdir="appbat", name="clear-old-nalfs"))
    appbat.addStep(ShellCommand(command=["mkdir", "-p", "../tools"],
                                workdir="appbat", name="create-tools-dir"))
    appbat.addStep(ShellCommand(command=["bzr", "checkout", 
                                         os.path.join(bzr_toplevel, 
                                                      "lsb/devel/nALFS")],
                                workdir="tools", name="checkout-nalfs"))
    appbat.addStep(ShellCommand(command=["rm", "-rf", "../results"], 
                                workdir="appbat", name="clear-old-results"))
    appbat.addStep(ShellCommand(command=["mkdir", "-p", "../results"],
                                workdir="appbat", name="create-results-dir"))
    appbat.addStep(Configure(command=["./configure"], workdir="appbat"))
    appbat.addStep(Compile(command=["make", "appbat", "ENTITYCHECK_QUIET=-q"], 
                           workdir="appbat", name="build-appbat", 
                           timeout=1800))
    appbat.addStep(Compile(command=["make", "desktop", 
                                    "ENTITYCHECK_QUIET=-q"], 
                           workdir="appbat", name="build-desktop", 
                           timeout=1800))
    appbat.addStep(Compile(command=["make", "addons", "ENTITYCHECK_QUIET=-q"], 
                           workdir="appbat", name="build-addons",
                           timeout=1800))
    appbat.addStep(ShellCommand(command="cd rpm && make",
                                name="build-pkg", workdir="appbat"))
    appbat.addStep(ShellCommand(
            command="find rpm -name '*.rpm' -exec cp '{}' ../results ';'",
            workdir="appbat", name="copy-results"))
    appbat.addStep(ShellCommand(command=["tar", "czf", "../results.tar.gz", 
                                         "../results"],
                                workdir="appbat", name="pack-results"))
    appbat.addStep(
        FileUpload(slavesrc="../results.tar.gz", 
                   masterdest="appbat-results-%s.tar.gz" % build_arch,
                   workdir="appbat", name="upload-results"))
    add_dependency_triggers("appbat", build_arch, appbat)

    lsb_builds.append(
        { 'name': 'appbat-' + build_arch, 'slavenames': buildslaves,
          'builddir': 'appbat-' + build_arch, 'factory': appbat,
          'category': 'lsb' })

# Final build configuration

c['builders'] = lsb_builds


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

c['status'].append(html.WebStatus(http_port=8009, allowForce=False))

c['status'].append(words.IRC(host="irc.linuxfoundation.org", nick="lsb_bb",
                             channels=["#lsb"], allowForce=True,
                             notify_events={'exception': 1,
                                            'successToFailure': 1,
                                            'failureToSuccess': 1}))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "LSB"
c['projectURL'] = "http://www.linuxbase.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://dev.linuxfoundation.org/buildbot/lsb/"
